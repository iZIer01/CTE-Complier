
---

## **Readme: Member 2 - Semantic Analysis of the V Language Compiler**

### **Introduction to Semantic Analysis**

In the **Semantic Analysis** stage, the goal is to check whether the code follows the rules of the language logically. This stage ensures that:
- **Variables** are declared before they are used.
- **Forbidden symbols** like `%`, `$`, and `&` are not present.
- There are no **invalid operator combinations**, like `+*`.

### **How Semantic Analysis Works in the Code**

#### **1. Declared Variables Tracking**

We keep track of all the variables that are declared using the `LET` keyword (e.g., `LET G = a + c`). These variables are stored in a list called **declaredVariables**. Before a variable is used in any line, we check if it has been declared previously. If we encounter a variable that hasn’t been declared, an error message is generated.

This is essential because if we used a variable like `temp` or `s` without declaring it first, it would result in a semantic error.

#### **2. Checking Each Line of Code**

Each line of the input code is processed one at a time. After breaking the line into smaller parts called **tokens**, we analyze each token:
- If the token is an **identifier** (i.e., a variable), we check if it has been declared. If it hasn’t been declared, an error is added.
- If the token is an **unknown symbol**, we check if it is one of the forbidden symbols (`<`, `%`, `$`, `&`). If it is, an error is generated.

This method ensures that we catch all potential issues line by line, rather than processing the entire program in one go.

#### **3. Reporting Errors**

Once all the lines have been analyzed, the program will check if any errors were found. If there are errors, they will be reported with the line number and the specific issue (such as a variable used before declaration or a forbidden symbol). If there are no errors, the program will confirm that everything is fine.

### **Why the Code is Written This Way**

The code is divided into manageable sections:
- **Declared Variables**: The list tracks which variables are already declared, so we can check their usage in subsequent lines.
- **Tokenization**: Breaking the code into tokens makes it easy to identify and check each part of the code. We separate the process of checking variables from checking forbidden symbols.
- **Clear and Separated Functions**: Each type of error has its own function, making the code modular and easier to understand. For example, the function that checks undeclared variables is separate from the function that checks forbidden symbols. This makes it easier to make changes if needed.

### **What Happens If Parts of This Code Are Removed?**

1. **If We Remove the Variable Declaration Check**:
   - Without checking if a variable is declared before it’s used, the program could try to use variables that don't exist. This would lead to errors that wouldn’t be caught. For example, the line `temp = <s%**h - j / w + d +*$&;` would result in an error, but without the check, we wouldn’t know why.
   
2. **If We Remove the Forbidden Symbols Check**:
   - Forbidden symbols such as `%`, `$`, and `&` are not allowed. If we didn’t check for them, the program could accept them, even though they are not part of the language syntax. This would break the rules and cause problems later in the process.

3. **If We Remove the Error Reporting**:
   - If we didn’t report errors, we would be left with no indication of where something went wrong. The user would not know which line caused the issue or why it’s wrong. This would make debugging much harder.

### **Conclusion**

The **Semantic Analysis** phase is crucial for ensuring that the code is not just syntactically correct, but also logically valid. By keeping track of declared variables, checking for forbidden symbols, and reporting errors, the program makes sure that the code adheres to the language’s rules.

This stage helps to identify problems early, before the program moves on to the next stages of compilation. Without this, the program would run the risk of producing unexpected results or failing completely.

---